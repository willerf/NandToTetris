// function Main.fibonacci 0
(Main.fibonacci)
@SP
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@LTTRUE0
D;JLT
@SP
A=M
M=0
@LTEND0
0;JMP
(LTTRUE0)
@SP
A=M
M=-1
(LTEND0)
@SP
M=M+1
// if-goto IF_TRUE
@SP
M=M-1
A=M
D=M
@IF_TRUE
D;JNE
// goto IF_FALSE
@IF_FALSE
0;JMP
// label IF_TRUE
(IF_TRUE)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@FRAME
M=D
@5
D=A
@FRAME
A=A-D
D=M
@RET
M=D
@SP
AM=M-1
D=M
@ARG
M=D
@SP
M=D+1
@FRAME
D=M
@1
AD=D-A
D=M
@THAT
M=D
@FRAME
D=M
@2
AD=D-A
D=M
@THIS
M=D
@FRAME
D=M
@3
AD=D-A
D=M
@ARG
M=D
@FRAME
D=M
@4
AD=D-A
D=M
@LCL
M=D
@RET
0;JMP
// label IF_FALSE
(IF_FALSE)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
// call Main.fibonacci 1
@Main.fibonacci0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=A
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=A
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=A
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=A
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
MD=M-D
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci0)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
// call Main.fibonacci 1
@Main.fibonacci1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=A
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=A
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=A
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=A
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
MD=M-D
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci1)
// add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
// return
@LCL
D=M
@FRAME
M=D
@5
D=A
@FRAME
A=A-D
D=M
@RET
M=D
@SP
AM=M-1
D=M
@ARG
M=D
@SP
M=D+1
@FRAME
D=M
@1
AD=D-A
D=M
@THAT
M=D
@FRAME
D=M
@2
AD=D-A
D=M
@THIS
M=D
@FRAME
D=M
@3
AD=D-A
D=M
@ARG
M=D
@FRAME
D=M
@4
AD=D-A
D=M
@LCL
M=D
@RET
0;JMP
// function Sys.init 0
(Sys.init)
@SP
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1
@Main.fibonacci2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=A
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=A
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=A
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=A
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
MD=M-D
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci2)
// label WHILE
(WHILE)
// goto WHILE
@WHILE
0;JMP
